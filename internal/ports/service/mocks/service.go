// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	dto "github.com/lazylex/watch-store/secure/internal/dto"
	service "github.com/lazylex/watch-store/secure/internal/service"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AssignGroupToAccount mocks base method.
func (m *MockService) AssignGroupToAccount(arg0 context.Context, arg1 dto.GroupServiceNamesWithUserIdDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGroupToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGroupToAccount indicates an expected call of AssignGroupToAccount.
func (mr *MockServiceMockRecorder) AssignGroupToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGroupToAccount", reflect.TypeOf((*MockService)(nil).AssignGroupToAccount), arg0, arg1)
}

// AssignInstancePermissionToAccount mocks base method.
func (m *MockService) AssignInstancePermissionToAccount(arg0 context.Context, arg1 dto.InstanceAndPermissionNamesWithUserIdDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstancePermissionToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignInstancePermissionToAccount indicates an expected call of AssignInstancePermissionToAccount.
func (mr *MockServiceMockRecorder) AssignInstancePermissionToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstancePermissionToAccount", reflect.TypeOf((*MockService)(nil).AssignInstancePermissionToAccount), arg0, arg1)
}

// AssignPermissionToGroup mocks base method.
func (m *MockService) AssignPermissionToGroup(arg0 context.Context, arg1 dto.GroupPermissionServiceNamesDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToGroup indicates an expected call of AssignPermissionToGroup.
func (mr *MockServiceMockRecorder) AssignPermissionToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToGroup", reflect.TypeOf((*MockService)(nil).AssignPermissionToGroup), arg0, arg1)
}

// AssignPermissionToRole mocks base method.
func (m *MockService) AssignPermissionToRole(arg0 context.Context, arg1 dto.PermissionRoleServiceNamesDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToRole indicates an expected call of AssignPermissionToRole.
func (mr *MockServiceMockRecorder) AssignPermissionToRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToRole", reflect.TypeOf((*MockService)(nil).AssignPermissionToRole), arg0, arg1)
}

// AssignRoleToAccount mocks base method.
func (m *MockService) AssignRoleToAccount(arg0 context.Context, arg1 dto.RoleServiceNamesWithUserIdDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToAccount indicates an expected call of AssignRoleToAccount.
func (mr *MockServiceMockRecorder) AssignRoleToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToAccount", reflect.TypeOf((*MockService)(nil).AssignRoleToAccount), arg0, arg1)
}

// AssignRoleToGroup mocks base method.
func (m *MockService) AssignRoleToGroup(arg0 context.Context, arg1 dto.GroupRoleServiceNamesDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToGroup indicates an expected call of AssignRoleToGroup.
func (mr *MockServiceMockRecorder) AssignRoleToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToGroup", reflect.TypeOf((*MockService)(nil).AssignRoleToGroup), arg0, arg1)
}

// CreateAccount mocks base method.
func (m *MockService) CreateAccount(arg0 context.Context, arg1 *dto.LoginPasswordDTO, arg2 service.AccountOptions) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1, arg2)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockServiceMockRecorder) CreateAccount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockService)(nil).CreateAccount), arg0, arg1, arg2)
}

// CreateGroup mocks base method.
func (m *MockService) CreateGroup(arg0 context.Context, arg1 dto.NameAndServiceWithDescriptionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockServiceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockService)(nil).CreateGroup), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockService) CreatePermission(arg0 context.Context, arg1 dto.PermissionWithoutNumberDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockServiceMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockService)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockService) CreateRole(arg0 context.Context, arg1 dto.NameAndServiceWithDescriptionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockServiceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockService)(nil).CreateRole), arg0, arg1)
}

// Login mocks base method.
func (m *MockService) Login(arg0 context.Context, arg1 *dto.LoginPasswordDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockService) Logout(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockServiceMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockService)(nil).Logout), arg0, arg1)
}

// RegisterInstance mocks base method.
func (m *MockService) RegisterInstance(arg0 context.Context, arg1 *dto.NameAndServiceDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstance indicates an expected call of RegisterInstance.
func (mr *MockServiceMockRecorder) RegisterInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstance", reflect.TypeOf((*MockService)(nil).RegisterInstance), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: joint.go

// Package mock_joint is a generated GoMock package.
package mock_joint

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	account_state "github.com/lazylex/watch-store/secure/internal/domain/value_objects/account_state"
	login "github.com/lazylex/watch-store/secure/internal/domain/value_objects/login"
	dto "github.com/lazylex/watch-store/secure/internal/dto"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateInstance mocks base method.
func (m *MockServiceInterface) CreateOrUpdateInstance(arg0 context.Context, arg1 *dto.NameServiceSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateInstance indicates an expected call of CreateOrUpdateInstance.
func (mr *MockServiceInterfaceMockRecorder) CreateOrUpdateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateInstance", reflect.TypeOf((*MockServiceInterface)(nil).CreateOrUpdateInstance), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockServiceInterface) CreateService(arg0 context.Context, arg1 *dto.NameDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceInterfaceMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceInterface)(nil).CreateService), arg0, arg1)
}

// MockLoginInterface is a mock of LoginInterface interface.
type MockLoginInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoginInterfaceMockRecorder
}

// MockLoginInterfaceMockRecorder is the mock recorder for MockLoginInterface.
type MockLoginInterfaceMockRecorder struct {
	mock *MockLoginInterface
}

// NewMockLoginInterface creates a new mock instance.
func NewMockLoginInterface(ctrl *gomock.Controller) *MockLoginInterface {
	mock := &MockLoginInterface{ctrl: ctrl}
	mock.recorder = &MockLoginInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginInterface) EXPECT() *MockLoginInterfaceMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockLoginInterface) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockLoginInterfaceMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockLoginInterface)(nil).DeleteSession), arg0, arg1)
}

// GetAccountLoginData mocks base method.
func (m *MockLoginInterface) GetAccountLoginData(arg0 context.Context, arg1 login.Login) (dto.UserIdLoginHashState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdLoginHashState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLoginData indicates an expected call of GetAccountLoginData.
func (mr *MockLoginInterfaceMockRecorder) GetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLoginData", reflect.TypeOf((*MockLoginInterface)(nil).GetAccountLoginData), arg0, arg1)
}

// GetAccountState mocks base method.
func (m *MockLoginInterface) GetAccountState(arg0 context.Context, arg1 login.Login) (account_state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", arg0, arg1)
	ret0, _ := ret[0].(account_state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockLoginInterfaceMockRecorder) GetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockLoginInterface)(nil).GetAccountState), arg0, arg1)
}

// GetSessionToken mocks base method.
func (m *MockLoginInterface) GetSessionToken(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionToken indicates an expected call of GetSessionToken.
func (mr *MockLoginInterfaceMockRecorder) GetSessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionToken", reflect.TypeOf((*MockLoginInterface)(nil).GetSessionToken), arg0, arg1)
}

// GetUserIdAndPasswordHash mocks base method.
func (m *MockLoginInterface) GetUserIdAndPasswordHash(arg0 context.Context, arg1 login.Login) (dto.UserIdHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdAndPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdAndPasswordHash indicates an expected call of GetUserIdAndPasswordHash.
func (mr *MockLoginInterfaceMockRecorder) GetUserIdAndPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdAndPasswordHash", reflect.TypeOf((*MockLoginInterface)(nil).GetUserIdAndPasswordHash), arg0, arg1)
}

// GetUserUUIDFromSession mocks base method.
func (m *MockLoginInterface) GetUserUUIDFromSession(ctx context.Context, sessionToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDFromSession", ctx, sessionToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDFromSession indicates an expected call of GetUserUUIDFromSession.
func (mr *MockLoginInterfaceMockRecorder) GetUserUUIDFromSession(ctx, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDFromSession", reflect.TypeOf((*MockLoginInterface)(nil).GetUserUUIDFromSession), ctx, sessionToken)
}

// SaveSession mocks base method.
func (m *MockLoginInterface) SaveSession(arg0 context.Context, arg1 *dto.UserIdToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockLoginInterfaceMockRecorder) SaveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockLoginInterface)(nil).SaveSession), arg0, arg1)
}

// SetAccountLoginData mocks base method.
func (m *MockLoginInterface) SetAccountLoginData(arg0 context.Context, arg1 *dto.UserIdLoginHashState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountLoginData indicates an expected call of SetAccountLoginData.
func (mr *MockLoginInterfaceMockRecorder) SetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountLoginData", reflect.TypeOf((*MockLoginInterface)(nil).SetAccountLoginData), arg0, arg1)
}

// SetAccountState mocks base method.
func (m *MockLoginInterface) SetAccountState(arg0 context.Context, arg1 *dto.LoginState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountState indicates an expected call of SetAccountState.
func (mr *MockLoginInterfaceMockRecorder) SetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountState", reflect.TypeOf((*MockLoginInterface)(nil).SetAccountState), arg0, arg1)
}

// MockRBACInterface is a mock of RBACInterface interface.
type MockRBACInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRBACInterfaceMockRecorder
}

// MockRBACInterfaceMockRecorder is the mock recorder for MockRBACInterface.
type MockRBACInterfaceMockRecorder struct {
	mock *MockRBACInterface
}

// NewMockRBACInterface creates a new mock instance.
func NewMockRBACInterface(ctrl *gomock.Controller) *MockRBACInterface {
	mock := &MockRBACInterface{ctrl: ctrl}
	mock.recorder = &MockRBACInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACInterface) EXPECT() *MockRBACInterfaceMockRecorder {
	return m.recorder
}

// AssignGroupToAccount mocks base method.
func (m *MockRBACInterface) AssignGroupToAccount(arg0 context.Context, arg1 *dto.UserIdGroupService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGroupToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGroupToAccount indicates an expected call of AssignGroupToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignGroupToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGroupToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignGroupToAccount), arg0, arg1)
}

// AssignInstancePermissionToAccount mocks base method.
func (m *MockRBACInterface) AssignInstancePermissionToAccount(arg0 context.Context, arg1 *dto.UserIdInstancePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstancePermissionToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignInstancePermissionToAccount indicates an expected call of AssignInstancePermissionToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignInstancePermissionToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstancePermissionToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignInstancePermissionToAccount), arg0, arg1)
}

// AssignPermissionToGroup mocks base method.
func (m *MockRBACInterface) AssignPermissionToGroup(arg0 context.Context, arg1 *dto.GroupPermissionService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToGroup indicates an expected call of AssignPermissionToGroup.
func (mr *MockRBACInterfaceMockRecorder) AssignPermissionToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToGroup", reflect.TypeOf((*MockRBACInterface)(nil).AssignPermissionToGroup), arg0, arg1)
}

// AssignPermissionToRole mocks base method.
func (m *MockRBACInterface) AssignPermissionToRole(arg0 context.Context, arg1 *dto.PermissionRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToRole indicates an expected call of AssignPermissionToRole.
func (mr *MockRBACInterfaceMockRecorder) AssignPermissionToRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToRole", reflect.TypeOf((*MockRBACInterface)(nil).AssignPermissionToRole), arg0, arg1)
}

// AssignRoleToAccount mocks base method.
func (m *MockRBACInterface) AssignRoleToAccount(arg0 context.Context, arg1 *dto.UserIdRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToAccount indicates an expected call of AssignRoleToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignRoleToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignRoleToAccount), arg0, arg1)
}

// AssignRoleToGroup mocks base method.
func (m *MockRBACInterface) AssignRoleToGroup(arg0 context.Context, arg1 *dto.GroupRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToGroup indicates an expected call of AssignRoleToGroup.
func (mr *MockRBACInterfaceMockRecorder) AssignRoleToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToGroup", reflect.TypeOf((*MockRBACInterface)(nil).AssignRoleToGroup), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockRBACInterface) CreateGroup(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockRBACInterfaceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockRBACInterface)(nil).CreateGroup), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockRBACInterface) CreatePermission(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockRBACInterfaceMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockRBACInterface)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockRBACInterface) CreateRole(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACInterfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACInterface)(nil).CreateRole), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockRBACInterface) DeleteGroup(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockRBACInterfaceMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockRBACInterface)(nil).DeleteGroup), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockRBACInterface) DeletePermission(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRBACInterfaceMockRecorder) DeletePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRBACInterface)(nil).DeletePermission), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRBACInterface) DeleteRole(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACInterfaceMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACInterface)(nil).DeleteRole), arg0, arg1)
}

// GetInstancePermissionsNumbersForAccount mocks base method.
func (m *MockRBACInterface) GetInstancePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdInstance) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePermissionsNumbersForAccount indicates an expected call of GetInstancePermissionsNumbersForAccount.
func (mr *MockRBACInterfaceMockRecorder) GetInstancePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePermissionsNumbersForAccount", reflect.TypeOf((*MockRBACInterface)(nil).GetInstancePermissionsNumbersForAccount), arg0, arg1)
}

// GetServicePermissionsForAccount mocks base method.
func (m *MockRBACInterface) GetServicePermissionsForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]dto.NameNumberDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePermissionsForAccount", arg0, arg1)
	ret0, _ := ret[0].([]dto.NameNumberDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePermissionsForAccount indicates an expected call of GetServicePermissionsForAccount.
func (mr *MockRBACInterfaceMockRecorder) GetServicePermissionsForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePermissionsForAccount", reflect.TypeOf((*MockRBACInterface)(nil).GetServicePermissionsForAccount), arg0, arg1)
}

// GetServicePermissionsNumbersForAccount mocks base method.
func (m *MockRBACInterface) GetServicePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePermissionsNumbersForAccount indicates an expected call of GetServicePermissionsNumbersForAccount.
func (mr *MockRBACInterfaceMockRecorder) GetServicePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePermissionsNumbersForAccount", reflect.TypeOf((*MockRBACInterface)(nil).GetServicePermissionsNumbersForAccount), arg0, arg1)
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AssignGroupToAccount mocks base method.
func (m *MockInterface) AssignGroupToAccount(arg0 context.Context, arg1 *dto.UserIdGroupService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGroupToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGroupToAccount indicates an expected call of AssignGroupToAccount.
func (mr *MockInterfaceMockRecorder) AssignGroupToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGroupToAccount", reflect.TypeOf((*MockInterface)(nil).AssignGroupToAccount), arg0, arg1)
}

// AssignInstancePermissionToAccount mocks base method.
func (m *MockInterface) AssignInstancePermissionToAccount(arg0 context.Context, arg1 *dto.UserIdInstancePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstancePermissionToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignInstancePermissionToAccount indicates an expected call of AssignInstancePermissionToAccount.
func (mr *MockInterfaceMockRecorder) AssignInstancePermissionToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstancePermissionToAccount", reflect.TypeOf((*MockInterface)(nil).AssignInstancePermissionToAccount), arg0, arg1)
}

// AssignPermissionToGroup mocks base method.
func (m *MockInterface) AssignPermissionToGroup(arg0 context.Context, arg1 *dto.GroupPermissionService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToGroup indicates an expected call of AssignPermissionToGroup.
func (mr *MockInterfaceMockRecorder) AssignPermissionToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToGroup", reflect.TypeOf((*MockInterface)(nil).AssignPermissionToGroup), arg0, arg1)
}

// AssignPermissionToRole mocks base method.
func (m *MockInterface) AssignPermissionToRole(arg0 context.Context, arg1 *dto.PermissionRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToRole indicates an expected call of AssignPermissionToRole.
func (mr *MockInterfaceMockRecorder) AssignPermissionToRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToRole", reflect.TypeOf((*MockInterface)(nil).AssignPermissionToRole), arg0, arg1)
}

// AssignRoleToAccount mocks base method.
func (m *MockInterface) AssignRoleToAccount(arg0 context.Context, arg1 *dto.UserIdRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToAccount indicates an expected call of AssignRoleToAccount.
func (mr *MockInterfaceMockRecorder) AssignRoleToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToAccount", reflect.TypeOf((*MockInterface)(nil).AssignRoleToAccount), arg0, arg1)
}

// AssignRoleToGroup mocks base method.
func (m *MockInterface) AssignRoleToGroup(arg0 context.Context, arg1 *dto.GroupRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToGroup indicates an expected call of AssignRoleToGroup.
func (mr *MockInterfaceMockRecorder) AssignRoleToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToGroup", reflect.TypeOf((*MockInterface)(nil).AssignRoleToGroup), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockInterface) CreateGroup(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockInterfaceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockInterface)(nil).CreateGroup), arg0, arg1)
}

// CreateOrUpdateInstance mocks base method.
func (m *MockInterface) CreateOrUpdateInstance(arg0 context.Context, arg1 *dto.NameServiceSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateInstance indicates an expected call of CreateOrUpdateInstance.
func (mr *MockInterfaceMockRecorder) CreateOrUpdateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateInstance", reflect.TypeOf((*MockInterface)(nil).CreateOrUpdateInstance), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockInterface) CreatePermission(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockInterfaceMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockInterface)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockInterface) CreateRole(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockInterfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInterface)(nil).CreateRole), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockInterface) CreateService(arg0 context.Context, arg1 *dto.NameDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockInterfaceMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockInterface)(nil).CreateService), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockInterface) DeleteGroup(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockInterfaceMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockInterface)(nil).DeleteGroup), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockInterface) DeletePermission(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockInterfaceMockRecorder) DeletePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockInterface)(nil).DeletePermission), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockInterface) DeleteRole(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockInterfaceMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockInterface)(nil).DeleteRole), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockInterface) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockInterfaceMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockInterface)(nil).DeleteSession), arg0, arg1)
}

// GetAccountLoginData mocks base method.
func (m *MockInterface) GetAccountLoginData(arg0 context.Context, arg1 login.Login) (dto.UserIdLoginHashState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdLoginHashState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountLoginData indicates an expected call of GetAccountLoginData.
func (mr *MockInterfaceMockRecorder) GetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountLoginData", reflect.TypeOf((*MockInterface)(nil).GetAccountLoginData), arg0, arg1)
}

// GetAccountState mocks base method.
func (m *MockInterface) GetAccountState(arg0 context.Context, arg1 login.Login) (account_state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountState", arg0, arg1)
	ret0, _ := ret[0].(account_state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountState indicates an expected call of GetAccountState.
func (mr *MockInterfaceMockRecorder) GetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountState", reflect.TypeOf((*MockInterface)(nil).GetAccountState), arg0, arg1)
}

// GetInstancePermissionsNumbersForAccount mocks base method.
func (m *MockInterface) GetInstancePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdInstance) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePermissionsNumbersForAccount indicates an expected call of GetInstancePermissionsNumbersForAccount.
func (mr *MockInterfaceMockRecorder) GetInstancePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePermissionsNumbersForAccount", reflect.TypeOf((*MockInterface)(nil).GetInstancePermissionsNumbersForAccount), arg0, arg1)
}

// GetInstanceSecret mocks base method.
func (m *MockInterface) GetInstanceSecret(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSecret", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSecret indicates an expected call of GetInstanceSecret.
func (mr *MockInterfaceMockRecorder) GetInstanceSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSecret", reflect.TypeOf((*MockInterface)(nil).GetInstanceSecret), arg0, arg1)
}

// GetServiceName mocks base method.
func (m *MockInterface) GetServiceName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceName indicates an expected call of GetServiceName.
func (mr *MockInterfaceMockRecorder) GetServiceName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceName", reflect.TypeOf((*MockInterface)(nil).GetServiceName), arg0, arg1)
}

// GetServicePermissionsForAccount mocks base method.
func (m *MockInterface) GetServicePermissionsForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]dto.NameNumberDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePermissionsForAccount", arg0, arg1)
	ret0, _ := ret[0].([]dto.NameNumberDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePermissionsForAccount indicates an expected call of GetServicePermissionsForAccount.
func (mr *MockInterfaceMockRecorder) GetServicePermissionsForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePermissionsForAccount", reflect.TypeOf((*MockInterface)(nil).GetServicePermissionsForAccount), arg0, arg1)
}

// GetServicePermissionsNumbersForAccount mocks base method.
func (m *MockInterface) GetServicePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicePermissionsNumbersForAccount indicates an expected call of GetServicePermissionsNumbersForAccount.
func (mr *MockInterfaceMockRecorder) GetServicePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePermissionsNumbersForAccount", reflect.TypeOf((*MockInterface)(nil).GetServicePermissionsNumbersForAccount), arg0, arg1)
}

// GetSessionToken mocks base method.
func (m *MockInterface) GetSessionToken(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionToken indicates an expected call of GetSessionToken.
func (mr *MockInterfaceMockRecorder) GetSessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionToken", reflect.TypeOf((*MockInterface)(nil).GetSessionToken), arg0, arg1)
}

// GetUserIdAndPasswordHash mocks base method.
func (m *MockInterface) GetUserIdAndPasswordHash(arg0 context.Context, arg1 login.Login) (dto.UserIdHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdAndPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdAndPasswordHash indicates an expected call of GetUserIdAndPasswordHash.
func (mr *MockInterfaceMockRecorder) GetUserIdAndPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdAndPasswordHash", reflect.TypeOf((*MockInterface)(nil).GetUserIdAndPasswordHash), arg0, arg1)
}

// GetUserUUIDFromSession mocks base method.
func (m *MockInterface) GetUserUUIDFromSession(ctx context.Context, sessionToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserUUIDFromSession", ctx, sessionToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserUUIDFromSession indicates an expected call of GetUserUUIDFromSession.
func (mr *MockInterfaceMockRecorder) GetUserUUIDFromSession(ctx, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserUUIDFromSession", reflect.TypeOf((*MockInterface)(nil).GetUserUUIDFromSession), ctx, sessionToken)
}

// SaveSession mocks base method.
func (m *MockInterface) SaveSession(arg0 context.Context, arg1 *dto.UserIdToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockInterfaceMockRecorder) SaveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockInterface)(nil).SaveSession), arg0, arg1)
}

// SetAccountLoginData mocks base method.
func (m *MockInterface) SetAccountLoginData(arg0 context.Context, arg1 *dto.UserIdLoginHashState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountLoginData indicates an expected call of SetAccountLoginData.
func (mr *MockInterfaceMockRecorder) SetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountLoginData", reflect.TypeOf((*MockInterface)(nil).SetAccountLoginData), arg0, arg1)
}

// SetAccountState mocks base method.
func (m *MockInterface) SetAccountState(arg0 context.Context, arg1 *dto.LoginState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountState indicates an expected call of SetAccountState.
func (mr *MockInterfaceMockRecorder) SetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountState", reflect.TypeOf((*MockInterface)(nil).SetAccountState), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: joint.go

// Package mock_joint is a generated GoMock package.
package mock_joint

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	account_state "github.com/lazylex/watch-store/secure/internal/domain/value_objects/account_state"
	login "github.com/lazylex/watch-store/secure/internal/domain/value_objects/login"
	dto "github.com/lazylex/watch-store/secure/internal/dto"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdateInstance mocks base method.
func (m *MockServiceInterface) CreateOrUpdateInstance(arg0 context.Context, arg1 *dto.NameServiceSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateInstance indicates an expected call of CreateOrUpdateInstance.
func (mr *MockServiceInterfaceMockRecorder) CreateOrUpdateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateInstance", reflect.TypeOf((*MockServiceInterface)(nil).CreateOrUpdateInstance), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockServiceInterface) CreateService(arg0 context.Context, arg1 *dto.NameDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockServiceInterfaceMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockServiceInterface)(nil).CreateService), arg0, arg1)
}

// MockLoginInterface is a mock of LoginInterface interface.
type MockLoginInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLoginInterfaceMockRecorder
}

// MockLoginInterfaceMockRecorder is the mock recorder for MockLoginInterface.
type MockLoginInterfaceMockRecorder struct {
	mock *MockLoginInterface
}

// NewMockLoginInterface creates a new mock instance.
func NewMockLoginInterface(ctrl *gomock.Controller) *MockLoginInterface {
	mock := &MockLoginInterface{ctrl: ctrl}
	mock.recorder = &MockLoginInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginInterface) EXPECT() *MockLoginInterfaceMockRecorder {
	return m.recorder
}

// AccountLoginData mocks base method.
func (m *MockLoginInterface) AccountLoginData(arg0 context.Context, arg1 login.Login) (dto.UserIdLoginHashState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdLoginHashState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountLoginData indicates an expected call of AccountLoginData.
func (mr *MockLoginInterfaceMockRecorder) AccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountLoginData", reflect.TypeOf((*MockLoginInterface)(nil).AccountLoginData), arg0, arg1)
}

// AccountState mocks base method.
func (m *MockLoginInterface) AccountState(arg0 context.Context, arg1 login.Login) (account_state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountState", arg0, arg1)
	ret0, _ := ret[0].(account_state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountState indicates an expected call of AccountState.
func (mr *MockLoginInterfaceMockRecorder) AccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountState", reflect.TypeOf((*MockLoginInterface)(nil).AccountState), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockLoginInterface) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockLoginInterfaceMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockLoginInterface)(nil).DeleteSession), arg0, arg1)
}

// SaveSession mocks base method.
func (m *MockLoginInterface) SaveSession(arg0 context.Context, arg1 *dto.UserIdToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockLoginInterfaceMockRecorder) SaveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockLoginInterface)(nil).SaveSession), arg0, arg1)
}

// SessionToken mocks base method.
func (m *MockLoginInterface) SessionToken(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionToken indicates an expected call of SessionToken.
func (mr *MockLoginInterfaceMockRecorder) SessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionToken", reflect.TypeOf((*MockLoginInterface)(nil).SessionToken), arg0, arg1)
}

// SetAccountLoginData mocks base method.
func (m *MockLoginInterface) SetAccountLoginData(arg0 context.Context, arg1 *dto.UserIdLoginHashState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountLoginData indicates an expected call of SetAccountLoginData.
func (mr *MockLoginInterfaceMockRecorder) SetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountLoginData", reflect.TypeOf((*MockLoginInterface)(nil).SetAccountLoginData), arg0, arg1)
}

// SetAccountState mocks base method.
func (m *MockLoginInterface) SetAccountState(arg0 context.Context, arg1 *dto.LoginState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountState indicates an expected call of SetAccountState.
func (mr *MockLoginInterfaceMockRecorder) SetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountState", reflect.TypeOf((*MockLoginInterface)(nil).SetAccountState), arg0, arg1)
}

// UserIdAndPasswordHash mocks base method.
func (m *MockLoginInterface) UserIdAndPasswordHash(arg0 context.Context, arg1 login.Login) (dto.UserIdHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIdAndPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserIdAndPasswordHash indicates an expected call of UserIdAndPasswordHash.
func (mr *MockLoginInterfaceMockRecorder) UserIdAndPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIdAndPasswordHash", reflect.TypeOf((*MockLoginInterface)(nil).UserIdAndPasswordHash), arg0, arg1)
}

// UserUUIDFromSession mocks base method.
func (m *MockLoginInterface) UserUUIDFromSession(ctx context.Context, sessionToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUUIDFromSession", ctx, sessionToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUUIDFromSession indicates an expected call of UserUUIDFromSession.
func (mr *MockLoginInterfaceMockRecorder) UserUUIDFromSession(ctx, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUUIDFromSession", reflect.TypeOf((*MockLoginInterface)(nil).UserUUIDFromSession), ctx, sessionToken)
}

// MockRBACInterface is a mock of RBACInterface interface.
type MockRBACInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRBACInterfaceMockRecorder
}

// MockRBACInterfaceMockRecorder is the mock recorder for MockRBACInterface.
type MockRBACInterfaceMockRecorder struct {
	mock *MockRBACInterface
}

// NewMockRBACInterface creates a new mock instance.
func NewMockRBACInterface(ctrl *gomock.Controller) *MockRBACInterface {
	mock := &MockRBACInterface{ctrl: ctrl}
	mock.recorder = &MockRBACInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRBACInterface) EXPECT() *MockRBACInterfaceMockRecorder {
	return m.recorder
}

// AssignGroupToAccount mocks base method.
func (m *MockRBACInterface) AssignGroupToAccount(arg0 context.Context, arg1 *dto.UserIdGroupService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGroupToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGroupToAccount indicates an expected call of AssignGroupToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignGroupToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGroupToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignGroupToAccount), arg0, arg1)
}

// AssignInstancePermissionToAccount mocks base method.
func (m *MockRBACInterface) AssignInstancePermissionToAccount(arg0 context.Context, arg1 *dto.UserIdInstancePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstancePermissionToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignInstancePermissionToAccount indicates an expected call of AssignInstancePermissionToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignInstancePermissionToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstancePermissionToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignInstancePermissionToAccount), arg0, arg1)
}

// AssignPermissionToGroup mocks base method.
func (m *MockRBACInterface) AssignPermissionToGroup(arg0 context.Context, arg1 *dto.GroupPermissionService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToGroup indicates an expected call of AssignPermissionToGroup.
func (mr *MockRBACInterfaceMockRecorder) AssignPermissionToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToGroup", reflect.TypeOf((*MockRBACInterface)(nil).AssignPermissionToGroup), arg0, arg1)
}

// AssignPermissionToRole mocks base method.
func (m *MockRBACInterface) AssignPermissionToRole(arg0 context.Context, arg1 *dto.PermissionRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToRole indicates an expected call of AssignPermissionToRole.
func (mr *MockRBACInterfaceMockRecorder) AssignPermissionToRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToRole", reflect.TypeOf((*MockRBACInterface)(nil).AssignPermissionToRole), arg0, arg1)
}

// AssignRoleToAccount mocks base method.
func (m *MockRBACInterface) AssignRoleToAccount(arg0 context.Context, arg1 *dto.UserIdRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToAccount indicates an expected call of AssignRoleToAccount.
func (mr *MockRBACInterfaceMockRecorder) AssignRoleToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToAccount", reflect.TypeOf((*MockRBACInterface)(nil).AssignRoleToAccount), arg0, arg1)
}

// AssignRoleToGroup mocks base method.
func (m *MockRBACInterface) AssignRoleToGroup(arg0 context.Context, arg1 *dto.GroupRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToGroup indicates an expected call of AssignRoleToGroup.
func (mr *MockRBACInterfaceMockRecorder) AssignRoleToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToGroup", reflect.TypeOf((*MockRBACInterface)(nil).AssignRoleToGroup), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockRBACInterface) CreateGroup(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockRBACInterfaceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockRBACInterface)(nil).CreateGroup), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockRBACInterface) CreatePermission(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockRBACInterfaceMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockRBACInterface)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockRBACInterface) CreateRole(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRBACInterfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRBACInterface)(nil).CreateRole), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockRBACInterface) DeleteGroup(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockRBACInterfaceMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockRBACInterface)(nil).DeleteGroup), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockRBACInterface) DeletePermission(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRBACInterfaceMockRecorder) DeletePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRBACInterface)(nil).DeletePermission), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockRBACInterface) DeleteRole(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRBACInterfaceMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRBACInterface)(nil).DeleteRole), arg0, arg1)
}

// InstancePermissionsNumbersForAccount mocks base method.
func (m *MockRBACInterface) InstancePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdInstance) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstancePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstancePermissionsNumbersForAccount indicates an expected call of InstancePermissionsNumbersForAccount.
func (mr *MockRBACInterfaceMockRecorder) InstancePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstancePermissionsNumbersForAccount", reflect.TypeOf((*MockRBACInterface)(nil).InstancePermissionsNumbersForAccount), arg0, arg1)
}

// ServicePermissionsForAccount mocks base method.
func (m *MockRBACInterface) ServicePermissionsForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]dto.NameNumberDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePermissionsForAccount", arg0, arg1)
	ret0, _ := ret[0].([]dto.NameNumberDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePermissionsForAccount indicates an expected call of ServicePermissionsForAccount.
func (mr *MockRBACInterfaceMockRecorder) ServicePermissionsForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePermissionsForAccount", reflect.TypeOf((*MockRBACInterface)(nil).ServicePermissionsForAccount), arg0, arg1)
}

// ServicePermissionsNumbersForAccount mocks base method.
func (m *MockRBACInterface) ServicePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePermissionsNumbersForAccount indicates an expected call of ServicePermissionsNumbersForAccount.
func (mr *MockRBACInterfaceMockRecorder) ServicePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePermissionsNumbersForAccount", reflect.TypeOf((*MockRBACInterface)(nil).ServicePermissionsNumbersForAccount), arg0, arg1)
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AccountLoginData mocks base method.
func (m *MockInterface) AccountLoginData(arg0 context.Context, arg1 login.Login) (dto.UserIdLoginHashState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdLoginHashState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountLoginData indicates an expected call of AccountLoginData.
func (mr *MockInterfaceMockRecorder) AccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountLoginData", reflect.TypeOf((*MockInterface)(nil).AccountLoginData), arg0, arg1)
}

// AccountState mocks base method.
func (m *MockInterface) AccountState(arg0 context.Context, arg1 login.Login) (account_state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountState", arg0, arg1)
	ret0, _ := ret[0].(account_state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountState indicates an expected call of AccountState.
func (mr *MockInterfaceMockRecorder) AccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountState", reflect.TypeOf((*MockInterface)(nil).AccountState), arg0, arg1)
}

// AssignGroupToAccount mocks base method.
func (m *MockInterface) AssignGroupToAccount(arg0 context.Context, arg1 *dto.UserIdGroupService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignGroupToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignGroupToAccount indicates an expected call of AssignGroupToAccount.
func (mr *MockInterfaceMockRecorder) AssignGroupToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignGroupToAccount", reflect.TypeOf((*MockInterface)(nil).AssignGroupToAccount), arg0, arg1)
}

// AssignInstancePermissionToAccount mocks base method.
func (m *MockInterface) AssignInstancePermissionToAccount(arg0 context.Context, arg1 *dto.UserIdInstancePermission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignInstancePermissionToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignInstancePermissionToAccount indicates an expected call of AssignInstancePermissionToAccount.
func (mr *MockInterfaceMockRecorder) AssignInstancePermissionToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignInstancePermissionToAccount", reflect.TypeOf((*MockInterface)(nil).AssignInstancePermissionToAccount), arg0, arg1)
}

// AssignPermissionToGroup mocks base method.
func (m *MockInterface) AssignPermissionToGroup(arg0 context.Context, arg1 *dto.GroupPermissionService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToGroup indicates an expected call of AssignPermissionToGroup.
func (mr *MockInterfaceMockRecorder) AssignPermissionToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToGroup", reflect.TypeOf((*MockInterface)(nil).AssignPermissionToGroup), arg0, arg1)
}

// AssignPermissionToRole mocks base method.
func (m *MockInterface) AssignPermissionToRole(arg0 context.Context, arg1 *dto.PermissionRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPermissionToRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPermissionToRole indicates an expected call of AssignPermissionToRole.
func (mr *MockInterfaceMockRecorder) AssignPermissionToRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPermissionToRole", reflect.TypeOf((*MockInterface)(nil).AssignPermissionToRole), arg0, arg1)
}

// AssignRoleToAccount mocks base method.
func (m *MockInterface) AssignRoleToAccount(arg0 context.Context, arg1 *dto.UserIdRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToAccount indicates an expected call of AssignRoleToAccount.
func (mr *MockInterfaceMockRecorder) AssignRoleToAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToAccount", reflect.TypeOf((*MockInterface)(nil).AssignRoleToAccount), arg0, arg1)
}

// AssignRoleToGroup mocks base method.
func (m *MockInterface) AssignRoleToGroup(arg0 context.Context, arg1 *dto.GroupRoleService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToGroup indicates an expected call of AssignRoleToGroup.
func (mr *MockInterfaceMockRecorder) AssignRoleToGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToGroup", reflect.TypeOf((*MockInterface)(nil).AssignRoleToGroup), arg0, arg1)
}

// CreateGroup mocks base method.
func (m *MockInterface) CreateGroup(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockInterfaceMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockInterface)(nil).CreateGroup), arg0, arg1)
}

// CreateOrUpdateInstance mocks base method.
func (m *MockInterface) CreateOrUpdateInstance(arg0 context.Context, arg1 *dto.NameServiceSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateInstance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateInstance indicates an expected call of CreateOrUpdateInstance.
func (mr *MockInterfaceMockRecorder) CreateOrUpdateInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateInstance", reflect.TypeOf((*MockInterface)(nil).CreateOrUpdateInstance), arg0, arg1)
}

// CreatePermission mocks base method.
func (m *MockInterface) CreatePermission(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockInterfaceMockRecorder) CreatePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockInterface)(nil).CreatePermission), arg0, arg1)
}

// CreateRole mocks base method.
func (m *MockInterface) CreateRole(arg0 context.Context, arg1 *dto.NameServiceDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockInterfaceMockRecorder) CreateRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockInterface)(nil).CreateRole), arg0, arg1)
}

// CreateService mocks base method.
func (m *MockInterface) CreateService(arg0 context.Context, arg1 *dto.NameDescription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateService indicates an expected call of CreateService.
func (mr *MockInterfaceMockRecorder) CreateService(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateService", reflect.TypeOf((*MockInterface)(nil).CreateService), arg0, arg1)
}

// DeleteGroup mocks base method.
func (m *MockInterface) DeleteGroup(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockInterfaceMockRecorder) DeleteGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockInterface)(nil).DeleteGroup), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockInterface) DeletePermission(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockInterfaceMockRecorder) DeletePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockInterface)(nil).DeletePermission), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockInterface) DeleteRole(arg0 context.Context, arg1 *dto.NameService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockInterfaceMockRecorder) DeleteRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockInterface)(nil).DeleteRole), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockInterface) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockInterfaceMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockInterface)(nil).DeleteSession), arg0, arg1)
}

// InstancePermissionsNumbersForAccount mocks base method.
func (m *MockInterface) InstancePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdInstance) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstancePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstancePermissionsNumbersForAccount indicates an expected call of InstancePermissionsNumbersForAccount.
func (mr *MockInterfaceMockRecorder) InstancePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstancePermissionsNumbersForAccount", reflect.TypeOf((*MockInterface)(nil).InstancePermissionsNumbersForAccount), arg0, arg1)
}

// InstanceSecret mocks base method.
func (m *MockInterface) InstanceSecret(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceSecret", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceSecret indicates an expected call of InstanceSecret.
func (mr *MockInterfaceMockRecorder) InstanceSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceSecret", reflect.TypeOf((*MockInterface)(nil).InstanceSecret), arg0, arg1)
}

// SaveSession mocks base method.
func (m *MockInterface) SaveSession(arg0 context.Context, arg1 *dto.UserIdToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockInterfaceMockRecorder) SaveSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockInterface)(nil).SaveSession), arg0, arg1)
}

// ServiceName mocks base method.
func (m *MockInterface) ServiceName(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceName indicates an expected call of ServiceName.
func (mr *MockInterfaceMockRecorder) ServiceName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceName", reflect.TypeOf((*MockInterface)(nil).ServiceName), arg0, arg1)
}

// ServiceNumberedPermissions mocks base method.
func (m *MockInterface) ServiceNumberedPermissions(arg0 context.Context, arg1 string) (*[]dto.NameNumber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceNumberedPermissions", arg0, arg1)
	ret0, _ := ret[0].(*[]dto.NameNumber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceNumberedPermissions indicates an expected call of ServiceNumberedPermissions.
func (mr *MockInterfaceMockRecorder) ServiceNumberedPermissions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceNumberedPermissions", reflect.TypeOf((*MockInterface)(nil).ServiceNumberedPermissions), arg0, arg1)
}

// ServicePermissionsForAccount mocks base method.
func (m *MockInterface) ServicePermissionsForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]dto.NameNumberDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePermissionsForAccount", arg0, arg1)
	ret0, _ := ret[0].([]dto.NameNumberDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePermissionsForAccount indicates an expected call of ServicePermissionsForAccount.
func (mr *MockInterfaceMockRecorder) ServicePermissionsForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePermissionsForAccount", reflect.TypeOf((*MockInterface)(nil).ServicePermissionsForAccount), arg0, arg1)
}

// ServicePermissionsNumbersForAccount mocks base method.
func (m *MockInterface) ServicePermissionsNumbersForAccount(arg0 context.Context, arg1 *dto.UserIdService) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicePermissionsNumbersForAccount", arg0, arg1)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicePermissionsNumbersForAccount indicates an expected call of ServicePermissionsNumbersForAccount.
func (mr *MockInterfaceMockRecorder) ServicePermissionsNumbersForAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicePermissionsNumbersForAccount", reflect.TypeOf((*MockInterface)(nil).ServicePermissionsNumbersForAccount), arg0, arg1)
}

// ServicesNames mocks base method.
func (m *MockInterface) ServicesNames(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesNames", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesNames indicates an expected call of ServicesNames.
func (mr *MockInterfaceMockRecorder) ServicesNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesNames", reflect.TypeOf((*MockInterface)(nil).ServicesNames), arg0)
}

// SessionToken mocks base method.
func (m *MockInterface) SessionToken(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionToken indicates an expected call of SessionToken.
func (mr *MockInterfaceMockRecorder) SessionToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionToken", reflect.TypeOf((*MockInterface)(nil).SessionToken), arg0, arg1)
}

// SetAccountLoginData mocks base method.
func (m *MockInterface) SetAccountLoginData(arg0 context.Context, arg1 *dto.UserIdLoginHashState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountLoginData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountLoginData indicates an expected call of SetAccountLoginData.
func (mr *MockInterfaceMockRecorder) SetAccountLoginData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountLoginData", reflect.TypeOf((*MockInterface)(nil).SetAccountLoginData), arg0, arg1)
}

// SetAccountState mocks base method.
func (m *MockInterface) SetAccountState(arg0 context.Context, arg1 *dto.LoginState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccountState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccountState indicates an expected call of SetAccountState.
func (mr *MockInterfaceMockRecorder) SetAccountState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountState", reflect.TypeOf((*MockInterface)(nil).SetAccountState), arg0, arg1)
}

// UserIdAndPasswordHash mocks base method.
func (m *MockInterface) UserIdAndPasswordHash(arg0 context.Context, arg1 login.Login) (dto.UserIdHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserIdAndPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(dto.UserIdHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserIdAndPasswordHash indicates an expected call of UserIdAndPasswordHash.
func (mr *MockInterfaceMockRecorder) UserIdAndPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserIdAndPasswordHash", reflect.TypeOf((*MockInterface)(nil).UserIdAndPasswordHash), arg0, arg1)
}

// UserUUIDFromSession mocks base method.
func (m *MockInterface) UserUUIDFromSession(ctx context.Context, sessionToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUUIDFromSession", ctx, sessionToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUUIDFromSession indicates an expected call of UserUUIDFromSession.
func (mr *MockInterfaceMockRecorder) UserUUIDFromSession(ctx, sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUUIDFromSession", reflect.TypeOf((*MockInterface)(nil).UserUUIDFromSession), ctx, sessionToken)
}
